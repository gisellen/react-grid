{"version":3,"sources":["components/TableCell.js","components/TableRow.js","components/Table.js","components/App.js","reportWebVitals.js","index.js"],"names":["TableCell","props","state","color","cellClick","bind","this","setState","className","onClick","style","backgroundColor","Component","TableRow","Array","apply","length","rowNum","map","e","i","Table","colNum","App","onAddColumns","onAddRows","handleChange","event","value","target","prevState","document","querySelector","gridTemplateColumns","id","class","onChange","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gPAEqBA,G,wDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,MAAO,IAEX,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBALH,E,wDAQdC,KAAKC,SAAS,CACVJ,MAAOG,KAAKL,MAAME,U,+BAItB,OACI,qBAAKK,UAAU,OAAOC,QAASH,KAAKF,UAAWM,MAAO,CAACC,gBAAgB,GAAD,OAAKL,KAAKJ,MAAMC,c,GAf3DS,cCCxB,SAASC,EAASZ,GAC7B,OACI,8BACCa,MAAMC,MAAM,KAAM,CAAEC,OAAQf,EAAMgB,SAASC,KAAI,SAACC,EAAGC,GAAJ,OAChD,cAAC,EAAD,CAAWjB,MAAOF,EAAME,aCJjB,SAASkB,EAAMpB,GAC5B,OACE,qBAAKO,UAAU,QAAf,SACGM,MAAMC,MAAM,KAAM,CAAEC,OAAQf,EAAMqB,SAAUJ,KAAI,SAACC,EAAGC,GAAJ,OAC/C,cAACP,EAAD,CAAUI,OAAQhB,EAAMgB,OAAQd,MAAOF,EAAME,a,ICwEtCoB,E,kDA1Eb,aAAe,IAAD,8BACZ,gBACKrB,MAAQ,CACXe,OAAQ,EACRK,OAAQ,EACRnB,MAAO,WAET,EAAKqB,aAAe,EAAKA,aAAanB,KAAlB,gBACpB,EAAKoB,UAAY,EAAKA,UAAUpB,KAAf,gBACjB,EAAKqB,aAAe,EAAKA,aAAarB,KAAlB,gBATR,E,yDAYDsB,GACX,IAAIC,EAAQD,EAAME,OAAOD,MACzBtB,KAAKC,SAAS,CACZJ,MAAOyB,M,qCAKTtB,KAAKC,UAAS,SAACuB,GACb,MAAO,CACLR,OAAQQ,EAAUR,OAAS,MAGnBS,SAASC,cAAc,UAC7BtB,MAAMuB,oBACV,WAAa3B,KAAKJ,MAAMoB,OAAS,GAAK,W,kCAIxChB,KAAKC,UAAS,SAACuB,GACb,MAAO,CACLb,OAAQa,EAAUb,OAAS,Q,+BAM/B,OACE,sBAAKT,UAAU,MAAf,UACE,wBAAQ0B,GAAG,cAAczB,QAASH,KAAKkB,aAAvC,yBAGA,wBAAQU,GAAG,WAAWzB,QAASH,KAAKmB,UAApC,qBAGA,+BACE,yBACEU,MAAM,6BACND,GAAG,cACHE,SAAU9B,KAAKoB,aAHjB,UAKE,wBAAQQ,GAAG,MAAMN,MAAM,UAAvB,iBAGA,wBAAQM,GAAG,QAAQN,MAAM,UAAzB,mBAGA,wBAAQM,GAAG,OAAON,MAAM,UAAxB,uBAKJ,cAACP,EAAD,CACEC,OAAQhB,KAAKJ,MAAMoB,OACnBL,OAAQX,KAAKJ,MAAMe,OACnBd,MAAOG,KAAKJ,MAAMC,e,GApEVkC,IAAMzB,WCQT0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlB,SAASmB,eAAe,SAM1BZ,M","file":"static/js/main.c477afb2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class TableCell extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            color: '',\r\n        }\r\n        this.cellClick = this.cellClick.bind(this)\r\n    }\r\n    cellClick(){\r\n        this.setState({\r\n            color: this.props.color,\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"cell\" onClick={this.cellClick} style={{backgroundColor: `${this.state.color}`}}>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport TableCell from './TableCell'\r\n\r\nexport default function TableRow(props) {\r\n    return (\r\n        <div>\r\n        {Array.apply(null, { length: props.rowNum}).map((e, i) => \r\n        <TableCell color={props.color}/>)}\r\n    </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport TableRow from './TableRow'\r\n\r\nexport default function Table(props) {\r\n  return (\r\n    <div className=\"table\">\r\n      {Array.apply(null, { length: props.colNum }).map((e, i) => (\r\n        <TableRow rowNum={props.rowNum} color={props.color}/>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"../App.css\";\nimport Table from \"./Table\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      rowNum: 3,\n      colNum: 3,\n      color: \"#FF2020\",\n    };\n    this.onAddColumns = this.onAddColumns.bind(this);\n    this.onAddRows = this.onAddRows.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    let value = event.target.value;\n    this.setState({\n      color: value,\n    });\n  }\n\n  onAddColumns() {\n    this.setState((prevState) => {\n      return {\n        colNum: prevState.colNum + 1,\n      };\n    });\n    let table = document.querySelector(\".table\");\n    table.style.gridTemplateColumns =\n      \"repeat(\" + (this.state.colNum + 1) + \", 1fr)\";\n  }\n\n  onAddRows() {\n    this.setState((prevState) => {\n      return {\n        rowNum: prevState.rowNum + 1,\n      };\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button id=\"add columns\" onClick={this.onAddColumns}>\n          Add Columns\n        </button>\n        <button id=\"add rows\" onClick={this.onAddRows}>\n          Add Row\n        </button>\n        <form>\n          <select\n            class=\"custom-select my-1 mr-sm-2\"\n            id=\"colorSelect\"\n            onChange={this.handleChange}\n          >\n            <option id=\"red\" value=\"#FF2020\">\n              red\n            </option>\n            <option id=\"green\" value=\"#77B61E\">\n              green\n            </option>\n            <option id=\"blue\" value=\"#1E56B6\">\n              blue\n            </option>\n          </select>\n        </form>\n        <Table\n          colNum={this.state.colNum}\n          rowNum={this.state.rowNum}\n          color={this.state.color}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}